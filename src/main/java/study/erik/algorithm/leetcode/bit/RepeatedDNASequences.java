/** * Alipay.com Inc. * Copyright (c) 2004-2021 All Rights Reserved. */package study.erik.algorithm.leetcode.bit;import org.junit.Assert;import org.junit.Test;import org.junit.runner.RunWith;import org.junit.runners.Parameterized;import org.junit.runners.Parameterized.Parameter;import org.junit.runners.Parameterized.Parameters;import study.erik.algorithm.util.ArrayUtils;import study.erik.algorithm.util.LetCodeCommit;import java.util.ArrayList;import java.util.Arrays;import java.util.Collections;import java.util.HashSet;import java.util.List;import java.util.Set;/** * @author yueyi * @version : RepeatedDNASequences.java, v 0.1 2021年10月16日 9:58 下午 yueyi Exp $ */@RunWith(Parameterized.class)public class RepeatedDNASequences {    @LetCodeCommit(title = "Repeated DNA Sequences",            selfRemark = "题目不错的，"                    + "关键点在于用二进制编码——把字符串编码成二级制"                    + "之所以能编码，因为字符码子就4个，而且编码长度确定了——10个字符")    public List<String> findRepeatedDnaSequences(String s) {        int[] map = new int[26];        //'A', 'C', 'G', and 'T'        map[0] = 0;        map['C' - 'A'] = 1;        map['G' - 'A'] = 2;        map['T' - 'A'] = 3;        Set<String> subStringSetMoreThanOne = new HashSet<>();        Set<Integer> sequenceSet = new HashSet<>();        int sequence = 0;        for (int i = 0; i < 10 && i < s.length(); i++) {            sequence = (sequence << 2 | map[s.charAt(i) - 'A']);        }        sequenceSet.add(sequence);        for (int i = 10; i < s.length(); i++) {            //先左移2位，在取后20位(对应10个AGTC字符)。            sequence = (((sequence << 2) & 0xfffff) | map[s.charAt(i) - 'A']);            if (sequenceSet.contains(sequence)) {                subStringSetMoreThanOne.add(s.substring(i - 9, i + 1));            }            sequenceSet.add(sequence);        }        return new ArrayList<>(subStringSetMoreThanOne);    }    @Parameter(0)    public String       s;    @Parameter(1)    public List<String> expect;    @Parameters    public static Object[][] data() {        return new Object[][] {                {"AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT", Arrays.asList("AAAAACCCCC", "CCCCCAAAAA")},                {"AAAAAAAAAAAAA", Arrays.asList("AAAAAAAAAA")},                {"A", Arrays.asList()},        };    }    @Test    public void test_() {        Assert.assertEquals(expect, findRepeatedDnaSequences(s));    }}
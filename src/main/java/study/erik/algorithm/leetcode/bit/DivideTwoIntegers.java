/** * Alipay.com Inc. * Copyright (c) 2004-2021 All Rights Reserved. */package study.erik.algorithm.leetcode.bit;import org.junit.Assert;import org.junit.Test;import study.erik.algorithm.util.LetCodeCommit;/** * @author yueyi * @version : DivideTwoIntegers.java, v 0.1 2021年09月28日 9:23 上午 yueyi Exp $ */public class DivideTwoIntegers {    @LetCodeCommit(title = "Divide Two Integers",            selfRemark = ""                    + "1.位操作的题目，就是这样需要考虑溢出。而对应溢出的简单策略就是用大号类型来盛装小号数据；"                    + "2.divide的本质是减。取模的本质也是减法。"                    + "3.当然取模实现时不一定要用减法，当它遇到位时，就有可能简化实现操作的")    public int divide(int dividend, int divisor) {        //这个case是题目要求的；        //而且题意也能推测出，以为 Integer.MIN_VALUE 对应的 -Integer.MIN_VALUE是Integer.MAX_VALUE+1        //这超出了有符号int的标识范围了        if (dividend == Integer.MIN_VALUE && divisor == -1) {return Integer.MAX_VALUE;}        long a = Math.abs(Long.valueOf(dividend));        long b = Math.abs(Long.valueOf(divisor));        int ret = 0;        int x;        while (a - b >= 0) {            for (x = 0; (a - (b << (x + 1))) >= 0; x++)                ;            ret += 1 << x;            a -= b << x;        }        return (dividend > 0) == (divisor > 0) ? ret : -ret;    }    @Test    public void test_() {        /*        -2147483648        -1         */        //Assert.assertEquals(1, divide(-1, -1));        Assert.assertEquals(-2147483648, divide(-2147483648, 1));        System.out.println(Integer.MIN_VALUE);    }}
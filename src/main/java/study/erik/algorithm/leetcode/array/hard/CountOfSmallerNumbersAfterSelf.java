/**
 * Alipay.com Inc.
 * Copyright (c) 2004-2022 All Rights Reserved.
 */
package study.erik.algorithm.leetcode.array.hard;

import org.junit.Assert;
import org.junit.Test;
import org.junit.runners.Parameterized.Parameter;
import org.junit.runners.Parameterized.Parameters;
import study.erik.algorithm.util.ArrayUtils;
import study.erik.algorithm.util.LetCodeCommit;
import study.erik.algorithm.util.ListUtils;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import java.util.stream.Collectors;

/**
 * @author yueyi
 * @version : CountOfSmallerNumbersAfterSelf.java, v 0.1 2022年01月08日 12:09 下午 yueyi Exp $
 */
public class CountOfSmallerNumbersAfterSelf {

    private class ArrayValWithOrigIdx {
        int val;
        int originalIdx;

        public ArrayValWithOrigIdx(int val, int originalIdx) {
            this.val = val;
            this.originalIdx = originalIdx;
        }
    }

    /**
     * Runtime: 900 ms, faster than 7.35%
     * Memory Usage: 128.1 MB, less than 20.87%
     * 小结：都不高
     *
     * @param nums nums
     * @return ret
     * 注意，这里二分查找能找到插入位置
     */
    public List<Integer> solution1(int[] nums) {
        List<Integer> sortedList = new ArrayList<>();
        int[] result = new int[nums.length];
        for (int i = nums.length - 1; i >= 0; i--) {
            int num = nums[i];
            int insertIndex = findInsertIndex(sortedList, num);
            result[i] = insertIndex;
            sortedList.add(insertIndex, num);
        }
        return Arrays.stream(result).boxed().collect(Collectors.toList());
    }

    public int findInsertIndex(List<Integer> list, Integer num) {
        int left = 0;
        int right = list.size() - 1;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            Integer valueM = list.get(mid);
            if (valueM < num) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        return left;
    }

    @LetCodeCommit(title = "315. Count of Smaller Numbers After Self")
    public List<Integer> countSmaller(int[] nums) {
        return solution1(nums);
        //return solution2(nums);
    }

    public List<Integer> solution2(int[] nums) {
        if (nums == null || nums.length == 0) {return new LinkedList<>();}
        int n = nums.length;
        int[] result = new int[n];

        ArrayValWithOrigIdx[] newNums = new ArrayValWithOrigIdx[n];
        for (int i = 0; i < n; ++i) {newNums[i] = new ArrayValWithOrigIdx(nums[i], i);}

        mergeSortAndCount(newNums, 0, n - 1, result);

        // notice we don't care about the sorted array after merge sort finishes.
        // we only wanted the result counts, generated by running merge sort
        List<Integer> resultList = new LinkedList<>();
        for (int i : result) {resultList.add(i);}
        return resultList;
    }

    private void mergeSortAndCount(ArrayValWithOrigIdx[] nums, int start, int end, int[] result) {
        if (start >= end) {return;}

        int mid = (start + end) / 2;
        mergeSortAndCount(nums, start, mid, result);
        mergeSortAndCount(nums, mid + 1, end, result);

        // left subarray start...mid
        // right subarray mid+1...end
        int leftPos = start;
        int rightPos = mid + 1;
        LinkedList<ArrayValWithOrigIdx> merged = new LinkedList<>();
        int numElemsRightArrayLessThanLeftArray = 0;
        while (leftPos < mid + 1 && rightPos <= end) {
            if (nums[leftPos].val > nums[rightPos].val) {
                // this code block is exactly what the problem is asking us for:
                // a number from the right side of the original input array, is smaller
                // than a number from the left side
                //
                // within this code block,
                // nums[rightPos] is smaller than the start of the left sub-array.
                // Since left sub-array is already sorted,
                // nums[rightPos] must also be smaller than the entire remaining left sub-array
                ++numElemsRightArrayLessThanLeftArray;

                // continue with normal merge sort, merge
                merged.add(nums[rightPos]);
                ++rightPos;
            } else {
                // a number from left side of array, is smaller than a number from
                // right side of array
                result[nums[leftPos].originalIdx] += numElemsRightArrayLessThanLeftArray;

                // Continue with normal merge sort
                merged.add(nums[leftPos]);
                ++leftPos;
            }
        }

        // part of normal merge sort, if either left or right sub-array is not empty,
        // move all remaining elements into merged result
        while (leftPos < mid + 1) {
            result[nums[leftPos].originalIdx] += numElemsRightArrayLessThanLeftArray;
            merged.add(nums[leftPos]);
            ++leftPos;
        }
        while (rightPos <= end) {
            merged.add(nums[rightPos]);
            ++rightPos;
        }
        // part of normal merge sort
        // copy back merged result into array
        int pos = start;
        for (ArrayValWithOrigIdx m : merged) {
            nums[pos] = m;
            ++pos;
        }
    }

    @Parameter
    public int[]         nums;
    @Parameter(1)
    public List<Integer> expect;

    @Parameters
    public static Object[][] data() {
        return new Object[][] {
                {ArrayUtils.buildArray("[5,2,6,1]"), ListUtils.build("[2,1,1,0]")},
                {ArrayUtils.buildArray("[-1]"), ListUtils.build("[0]")},
                {ArrayUtils.buildArray("[-1,-1]"), ListUtils.build("[0,0]")},
        };
    }

    @Test
    public void test_() {
        Assert.assertEquals(expect, countSmaller(nums));
    }

}